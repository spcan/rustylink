//! Named Link module
//! Holds communication channels for different Link interfaces
//! The user can name these interfaces


use crossbeam;

/// Max Send buffer size
pub const MAX_SBUFFER_SIZE: usize = 2048;

/// Max Receive buffer size
pub const MAX_RBUFFER_SIZE: usize = 512;

/// Named Link
/// A Link to a device interface that can be selected by name and
/// unique ID (generated by the internal debugger).
/// It contains two assymetrical (differently sized channels) for
/// communication with the interface.
#[derive(Clone)]
pub struct NamedLink {
	id: usize,
	name: String,

	/// Send channel
	/// This channel size is in the kB orders of magnitude.
	/// It is used to send commands to the interface, as well as
	/// sending data (binaries, device info, etc...).
	sch: crossbeam::Sender<Vec<u8>>,
	/// Send channel buffer.
	sbuffer: [u8; MAX_SBUFFER_SIZE],
	/// Receive channel
	/// This channel size is less than a kB
	/// It is used to receive debug information, register
	/// information as well as ACK and other commands.
	rch: crossbeam::Receiver<Vec<u8>>,
	/// Receive buffer.
	rbuffer: [u8; MAX_RBUFFER_SIZE],
}

impl NamedLink{
	/// Create a new Link with the given channels
	pub fn new(id: usize, name: String, sch: crossbeam::Sender<Vec<u8>>, rch: crossbeam::Receiver<Vec<u8>>) -> Self {
		Self {
			id,
			name,
			sch,
			sbuffer: [0; MAX_SBUFFER_SIZE],
			rch,
			rbuffer: [0; MAX_RBUFFER_SIZE],
		}
	}

	/// Rename the ELF file (internal rename, for user handling)
	/// Refer to UI
	pub fn rename(&mut self, name: String) {
		self.name = name;
	}

	/// Returns if it answers to a given ID
	pub fn identify(&self, id: usize) -> bool {
		self.id == id
	}
}